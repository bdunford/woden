import binascii
import sys

class Buffer(object):

    @staticmethod
    def BadChars(addChars = None):
        bc = '\x00\x0a\x0d'
        if addChars:
            bc += addChars
        return bc

    @staticmethod
    def Fuzz(maxL,incr):
        bfr = []
        cntr = incr
        while cntr <= maxL:
            bfr.append("A"*cntr)
            cntr += incr
        return bfr

    @staticmethod
    def AllTheBytes(badchars=None):
        if not badchars:
            badchars = Buffer.BadChars()
        
        exclude = map(lambda x: binascii.hexlify(x.encode('UTF-8')), list(badchars))
        r = ["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"]
        bits = []
        for f in r:
            for s in r:
                b = f + s
                if b not in exclude:
                    bits.append(b)
        return str(binascii.unhexlify(''.join(bits)))

    @staticmethod
    def Bad():
        return "\x00\x0a\x0d"

    @staticmethod
    def CreatePattern(length):
        seta="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        setb="abcdefghijklmnopqrstuvwxyz"
        setc="0123456789"

        p=""
        a=0
        b=0
        c=0

        while len(p) < length:
            p += seta[a] + setb[b] + setc[c]
            c+=1
            if c == len(setc):
                c=0
                b+=1
            if b == len(setb):
                b=0
                a+=1
            if a == len(seta):
                a=0
        return p[:length]

    @staticmethod
    def PatternOffset(value, length):
        p = Buffer.CreatePattern(length)
        if len(value) == 8:
            v = binascii.unhexlify(value)[::-1]
            return p.find(v)
        else:
            return p.find(value)

    @staticmethod
    def NOPs(howMany=1):
        return "\x90" * howMany

    @staticmethod
    def ABC(ltc,tot):
        adds = tot - ltc - 4
        return (ltc * "A") + ("B" * 4) + ("C"*adds)
